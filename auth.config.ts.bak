import NextAuth from 'next-auth/next';
import CredentialsProvider from 'next-auth/providers/credentials';
import GoogleProvider from 'next-auth/providers/google';
import { MongoDBAdapter } from '@next-auth/mongodb-adapter';
import clientPromise from './lib/mongodb';
import bcrypt from 'bcryptjs';

// Tipos para TypeScript
type User = {
  id?: string;
  name?: string | null;
  email?: string | null;
  image?: string | null;
};

type Profile = {
  email?: string;
  name?: string;
  image?: string;
};

type Account = {
  provider?: string;
};

// Extender los tipos de sesión
declare module 'next-auth' {
  interface Session {
    user: {
      id: string;
      name?: string | null;
      email?: string | null;
      image?: string | null;
    };
  }

  interface User {
    id: string;
    name?: string | null;
    email?: string | null;
    image?: string | null;
  }
}

export default NextAuth({
  // Proveedores de autenticación
  providers: [
    GoogleProvider({
      clientId: process.env.GOOGLE_CLIENT_ID || '',
      clientSecret: process.env.GOOGLE_CLIENT_SECRET || '',
      authorization: {
        params: {
          prompt: "consent",
          access_type: "offline",
          response_type: "code"
        }
      }
    }),
    CredentialsProvider({
      name: 'Credentials',
      credentials: {
        email: { label: "Email", type: "email" },
        password: { label: "Password", type: "password" }
      },
      async authorize(credentials) {
        if (!credentials?.email || !credentials?.password) {
          throw new Error('Por favor ingresa tu correo y contraseña');
        }

        try {
          const client = await clientPromise;
          const db = client.db();
          
          const user = await db.collection('users').findOne({ email: credentials.email });
          
          if (!user) {
            throw new Error('No existe un usuario con este correo');
          }

          const isValid = await bcrypt.compare(credentials.password, user.password || '');
          
          if (!isValid) {
            throw new Error('Contraseña incorrecta');
          }

          return {
            id: user._id.toString(),
            email: user.email,
            name: user.name,
            image: user.image
          };
        } catch (error) {
          console.error('Error en la autenticación:', error);
          throw new Error('Error en la autenticación');
        }
      }
    })
  ],
  
  // Configuración de la base de datos
  adapter: MongoDBAdapter(clientPromise, {
    databaseName: process.env.MONGODB_DB_NAME || 'spotify-clone',
  }),
  
  // Configuración de sesión
  session: {
    strategy: 'jwt',
    maxAge: 30 * 24 * 60 * 60, // 30 días
  },
  
  // Callbacks
  callbacks: {
    async session({ session, token }) {
      if (session?.user) {
        session.user.id = token.sub || token.id || '';
      }
      return session;
    },
    async jwt({ token, user }) {
      if (user) {
        token.id = user.id;
      }
      return token;
    },
    async signIn({ user, account, profile }) {
      if (account?.provider === 'google') {
        try {
          const client = await clientPromise;
          const db = client.db(process.env.MONGODB_DB_NAME || 'spotify-clone');
          
          // Verificar si el usuario ya existe
          const existingUser = await db.collection('users').findOne({ email: user.email });
          
          if (!existingUser) {
            // Crear un nuevo usuario si no existe
            await db.collection('users').insertOne({
              email: user.email,
              name: user.name,
              image: user.image,
              emailVerified: new Date(),
              createdAt: new Date(),
              updatedAt: new Date()
            });
          }
          
          return true;
        } catch (error) {
          console.error('Error en signIn callback:', error);
          return false;
        }
      }
      return true;
    }
  },
  
  // Páginas personalizadas
  pages: {
    signIn: '/auth/signin',
  },
  
  // Configuración de depuración
  debug: process.env.NODE_ENV === 'development',
  
  // Secreto para firmar las cookies
  secret: process.env.NEXTAUTH_SECRET || 'secreto-por-defecto-cambiar-en-produccion',
  
  // Configuración de cookies
  cookies: {
    sessionToken: {
      name: `__Secure-next-auth.session-token`,
      options: {
        httpOnly: true,
        sameSite: 'lax',
        path: '/',
        secure: process.env.NODE_ENV === 'production'
      }
    }
  },
  // Configuración de eventos
  events: {},
  // Configuración de temas
  theme: {
    colorScheme: 'dark',
  },
  // Configuración de logs
  logger: {
    error(code, metadata) {
      console.error(code, metadata);
    },
    warn(code) {
      console.warn(code);
    },
    debug(code, metadata) {
      console.debug(code, metadata);
    }
  },
  // Configuración de JWT
  jwt: {
    secret: process.env.NEXTAUTH_JWT_SECRET,
    maxAge: 30 * 24 * 60 * 60, // 30 días
  },
  // Configuración de base de datos
  database: process.env.MONGODB_URI,
  // Configuración de sesión
  useSecureCookies: process.env.NODE_ENV === 'production',
  // Configuración de cookies
  cookiesPolicy: 'single_host_origin',
  // Configuración de proveedores
  providers: [],
  // Configuración de callbacks
  callbacks: {},
  // Configuración de eventos
  events: {},
  // Configuración de temas
  theme: {},
  // Configuración de logs
  logger: {},
  // Configuración de JWT
  jwt: {},
  // Configuración de base de datos
  database: '',
  // Configuración de sesión
  useSecureCookies: false,
  // Configuración de cookies
  cookiesPolicy: '',
  // Configuración de proveedores
  providers: [],
  // Configuración de callbacks
  callbacks: {},
  // Configuración de eventos
  events: {},
  // Configuración de temas
  theme: {},
  // Configuración de logs
  logger: {},
  // Configuración de JWT
  jwt: {},
  // Configuración de base de datos
  database: '',
  // Configuración de sesión
  useSecureCookies: false,
  // Configuración de cookies
  cookiesPolicy: ''
});
  // Configure one or more authentication providers
  providers: [
    GoogleProvider({
      clientId: process.env.GOOGLE_CLIENT_ID || '',
      clientSecret: process.env.GOOGLE_CLIENT_SECRET || '',
      authorization: {
        params: {
          prompt: "consent",
          access_type: "offline",
          response_type: "code"
        }
      }
    }),
    Credentials({
      id: 'credentials',
      name: 'Credentials',
      type: 'credentials',
      credentials: {
        email: { label: 'Email', type: 'email' },
        password: { label: 'Password', type: 'password' }
      },
      async authorize(credentials: any) {
        console.log('Iniciando proceso de autorización con credenciales:', {
          email: credentials?.email ? 'presente' : 'ausente',
          password: credentials?.password ? 'presente' : 'ausente'
        });

        if (!credentials?.email || !credentials?.password) {
          console.error('Faltan credenciales');
          throw new Error('Por favor ingresa tu correo y contraseña');
        }

        try {
          console.log('Conectando a la base de datos...');
          const client = await clientPromise;
          console.log('Conexión a la base de datos exitosa');
          
          const db = client.db();
          console.log('Buscando usuario con email:', credentials.email);
          
          const user = await db.collection('users').findOne({ email: credentials.email });
          console.log('Resultado de la búsqueda de usuario:', user ? 'usuario encontrado' : 'usuario no encontrado');

          if (!user) {
            console.error('No se encontró ningún usuario con el correo:', credentials.email);
            throw new Error('No existe un usuario con este correo');
          }

          // Asegurarse de que user.password sea una cadena
          const userPassword = user.password || '';
          console.log('Verificando contraseña...');
          const isPasswordValid = await bcrypt.compare(credentials.password, userPassword);
          console.log('Resultado de la verificación de contraseña:', isPasswordValid);

          if (!isPasswordValid) {
            console.error('Contraseña incorrecta para el usuario:', credentials.email);
            throw new Error('Contraseña incorrecta');
          }

          // Return user object without the password
          const { password, ...userWithoutPassword } = user as any;
          console.log('Usuario autorizado correctamente:', { id: user._id.toString(), email: user.email });
          return {
            id: user._id.toString(),
            email: user.email,
            name: user.name,
            image: user.image
          };
        } catch (error) {
          console.error('Error durante la autorización:', error);
          // Asegurarse de que el error sea serializable
          const errorMessage = error instanceof Error ? error.message : 'Ocurrió un error durante la autenticación';
          throw new Error(JSON.stringify({ error: errorMessage }));
        }
      },
    }),
  ],
  
  // Use MongoDB adapter to persist user data
  adapter: MongoDBAdapter(clientPromise, {
    databaseName: process.env.MONGODB_DB_NAME || 'spotify-clone',
  }) as Adapter,
  
  // Enable debug in development
  debug: process.env.NODE_ENV === 'development',
  
  // Session configuration
  session: {
    strategy: 'jwt' as const,
  },
  
  // Callbacks
  callbacks: {
    async session({ session, token, user }): Promise<Session> {
      if (session?.user) {
        session.user.id = token.sub || (token as JWT & { id?: string }).id || user?.id || '';
      }
      return session;
    },
    async jwt({ token, user }): Promise<JWT> {
      if (user) {
        (token as JWT & { id?: string }).id = user.id || '';
      }
      return token;
    },
    async signIn({ user, account, profile }: { 
      user: AuthUser | undefined; 
      account: Account | null; 
      profile?: Profile | undefined 
    }): Promise<boolean> {
      if (account?.provider === 'google') {
        try {
          const client = await clientPromise;
          const db = client.db(process.env.MONGODB_DB_NAME || 'spotify-clone');
          
          // Verificar si el usuario ya existe
          const existingUser = await db.collection('users').findOne({ email: user.email });
          
          if (!existingUser) {
            // Crear un nuevo usuario si no existe
            await db.collection('users').insertOne({
              email: user.email,
              name: user.name,
              image: user.image,
              emailVerified: new Date(),
              createdAt: new Date(),
              updatedAt: new Date()
            });
          }
          
          return true;
        } catch (error) {
          console.error('Error en signIn callback:', error);
          return false;
        }
      }
      return true;
    }
  },
  
  // JWT configuration
  jwt: {
    maxAge: 30 * 24 * 60 * 60, // 30 days
  },
  
  secret: process.env.NEXTAUTH_SECRET || '',
  
  // Pages configuration
  pages: {
    signIn: '/auth/signin',
  },
  
  // Cookies configuration
  cookies: {
    sessionToken: {
      name: `__Secure-next-auth.session-token`,
      options: {
        httpOnly: true,
        sameSite: 'lax' as const,
        path: '/',
        secure: process.env.NODE_ENV === 'production',
      },
    },
  },
};

// Export the auth options for use in API routes
export default authOptions;

// Create the NextAuth handler for API routes
const handler = NextAuth(authOptions);

export { handler as GET, handler as POST };
